import os
import sys
import yaml
from pathlib import Path
from django.conf import settings
from django.core.management.base import BaseCommand
from django.core.management import call_command
from backend.models import VulnerabilityCategory, VulnerabilityTemplate, CWE
from backend.models.vulnerability import Severity


class Command(BaseCommand):
    help = "Import vulnerabiltiy templates from directory"

    def add_arguments(self, parser):
        parser.add_argument("directory")
        parser.add_argument(
            "--clear",
            help="Remove all previously imported vulnerabilities",
            action="store_true",
        )

    def get_categories_file_path(self, directory):
        return os.path.join(directory, "categories.yaml")

    def import_categories(self, directory):
        for category_path in Path(directory).rglob("categories.yaml"):
            with open(category_path, "r") as f:
                for key, value in yaml.safe_load(f).items():
                    default_values = {}
                    for lang in settings.LANGUAGES:
                        if value["locale"].get(lang):
                            default_values["name_%s" % lang] = value["locale"][lang][
                                "name"
                            ]
                    default_values["name"] = value["locale"]["en"]["name"]
                    _obj, created = VulnerabilityCategory.objects.update_or_create(
                        category_id=key, defaults=default_values
                    )
        self.stdout.write(
            self.style.SUCCESS("Imported vulnerability categories successfully")
        )

    def handle(self, *args, **options):
        if options["clear"]:
            VulnerabilityTemplate.objects.all().delete()
        self.stdout.write("Importing CWE entries...")
        call_command("import_cwe_entries")
        self.stdout.write("Importing categories...")
        directory = options["directory"]
        self.import_categories(directory)
        self.stdout.write("Importing vulnerability templates...")
        for path in Path(directory).rglob("info.yaml"):
            if "_template/info.yaml" in str(path):
                continue
            self.import_template(path)

    def _get_description(self, filename, language):
        # read description of a template by its locale
        desc_filename = str(filename).replace(
            "info.yaml", "locale/%s/description.md" % language
        )
        if not os.path.exists(desc_filename):
            return sys.stdout.write(
                "No such locale '%s' skipping description..." % language
            )
        with open(desc_filename, "r") as f:
            return f.read()

    def _get_recommendation(self, filename, language):
        desc_filename = str(filename).replace(
            "info.yaml", "locale/%s/recommendation.md" % language
        )
        if not os.path.exists(desc_filename):
            return sys.stdout.write(
                "No such locale '%s' skipping recommendation..." % language
            )
        with open(desc_filename, "r") as f:
            return f.read()

    def import_template(self, filename):
        with open(filename, "r") as f:
            for item in yaml.safe_load(f):
                default_values = {}
                for lang in settings.LANGUAGES:
                    description = self._get_description(filename, lang[0])
                    recommendation = self._get_recommendation(filename, lang[0])
                    default_values["description_%s" % lang[0]] = description
                    default_values["recommendation_%s" % lang[0]] = recommendation
                    default_values["name_%s" % lang[0]] = item["locale"][lang[0]][
                        "name"
                    ]
                    default_values["severity"] = Severity[item["severity"].upper()]
                    template, _created = VulnerabilityTemplate.objects.update_or_create(
                        vulnerability_id=item["id"], defaults=default_values
                    )
                    try:
                        category = VulnerabilityCategory.objects.get(
                            category_id=item["category"]
                        )
                    except VulnerabilityCategory.DoesNotExist:
                        print(item["category"])
                        raise VulnerabilityCategory.DoesNotExist
                    template.categories.add(category)

                    # add CWE
                    cwe = item.get("cwe")
                    if cwe:
                        try:
                            cwe_id = int(cwe)
                        except Exception:
                            cwe_id = cwe.split("-")[-1]
                        try:
                            cwe = CWE.objects.get(cwe_id=cwe_id)
                            template.cwe = cwe
                        except CWE.DoesNotExist:
                            print(
                                f"[{template.vulnerability_id}]: CWE does not exist: {cwe_id}"
                            )
                    template.save()
