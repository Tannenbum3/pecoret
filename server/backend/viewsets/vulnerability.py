from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.filters import SearchFilter
from backend.serializers.vulnerability import (
    VulnerabilityTemplateSerializer,
    ProjectVulnerabilitySerializer,
)
from backend import models
from backend.models.finding import Severity
from backend import permissions
from pecoret.core.viewsets import PeCoReTModelViewSet, PeCoReTReadOnlyModelViewSet


class VulnerabilityTemplateViewSet(PeCoReTReadOnlyModelViewSet):
    queryset = models.VulnerabilityTemplate.objects.order_by("vulnerability_id")
    search_fields = ["name", "vulnerability_id"]
    filterset_class = None
    serializer_class = VulnerabilityTemplateSerializer
    permission_classes = [
        permissions.GroupPermission(
            read_write_groups=[],
            read_only_groups=[
                permissions.Groups.GROUP_PENTESTER,
                permissions.Groups.ADVISORY_MANAGEMENT,
                permissions.Groups.GROUP_MANAGEMENT
            ],
        )
    ]


class ProjectVulnerabilityViewSet(PeCoReTModelViewSet):
    queryset = models.ProjectVulnerability.objects.none()
    search_fields = ["vulnerability_id", "name"]
    filterset_class = None
    serializer_class = ProjectVulnerabilitySerializer
    permission_classes = [permissions.PRESET_PENTESTER_OR_READONLY]

    def get_queryset(self):
        return models.ProjectVulnerability.objects.for_project(self.request.project)

    def perform_create(self, serializer):
        serializer.save(project=self.request.project)

    @action(detail=False, methods=["get"])
    def search(self, request, project, pk=None):
        search_filter = SearchFilter()
        project_vulnerabilities = search_filter.filter_queryset(
            request,
            self.get_queryset().values("vulnerability_id", "name", "severity"),
            self,
        )
        available_templates = search_filter.filter_queryset(
            request,
            models.VulnerabilityTemplate.objects.exclude(
                vulnerability_id__in=project_vulnerabilities.values_list(
                    "vulnerability_id", flat=True
                )
            ).values("vulnerability_id", "name", "severity"),
            self,
        )
        all_vulnerabilities = list(project_vulnerabilities) + list(available_templates)
        for vuln in all_vulnerabilities:
            vuln["severity"] = Severity(vuln["severity"]).label
        return Response(all_vulnerabilities)
